DUT: axi4_write_slave.v
module axi4_write_slave #(parameter ADDR_WIDTH = 32, DATA_WIDTH = 32) (
    input  logic                    ACLK,
    input  logic                    ARESETn,

    // Write Address Channel
    input  logic                    AWVALID,
    output logic                    AWREADY,
    input  logic [ADDR_WIDTH-1:0]   AWADDR,
    input  logic [7:0]              AWLEN,
    input  logic [2:0]              AWSIZE,
    input  logic [1:0]              AWBURST,

    // Write Data Channel
    input  logic                    WVALID,
    output logic                    WREADY,
    input  logic [DATA_WIDTH-1:0]   WDATA,
    input  logic [3:0]              WSTRB,
    input  logic                    WLAST,

    // Write Response Channel
    output logic                    BVALID,
    input  logic                    BREADY,
    output logic [1:0]              BRESP
);

    logic [DATA_WIDTH-1:0] mem [0:255];
    logic [7:0]            burst_cnt;
    logic [ADDR_WIDTH-1:0] addr_reg;
    typedef enum logic [1:0] {IDLE, WRITE, RESP} state_t;
    state_t state;

    assign AWREADY = (state == IDLE);
    assign WREADY  = (state == WRITE);
    assign BVALID  = (state == RESP);
    assign BRESP   = 2'b00; // OKAY

    always_ff @(posedge ACLK or negedge ARESETn) begin
        if (!ARESETn) begin
            state <= IDLE;
            burst_cnt <= 0;
        end else begin
            case (state)
                IDLE: begin
                    if (AWVALID) begin
                        addr_reg <= AWADDR;
                        burst_cnt <= 0;
                        state <= WRITE;
                    end
                end
                WRITE: begin
                    if (WVALID) begin
                        mem[addr_reg[9:2] + burst_cnt] <= WDATA;
                        burst_cnt <= burst_cnt + 1;
                        if (WLAST) begin
                            state <= RESP;
                        end
                    end
                end
                RESP: begin
                    if (BREADY)
                        state <= IDLE;
                end
            endcase
        end
    end
endmodule


